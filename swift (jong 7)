day 61 : Set union


import UIKit

let myFriends = ["철수", "영희", "수잔", "제시카"]
let yourFriends = ["철수", "영희", "제니퍼", "존시나"]


let myFriendsSet = Set(myFriends)
let yourFriendsSet = Set(yourFriends)

let totalFriends = myFriendsSet.union(yourFriends) //중복은 제거되고 두 set이 합쳐진다


---------------------------------------------------


day 62 : Set intersection


import UIKit

let myFriends = ["철수", "영희", "수잔", "제시카"]
let yourFriends = ["철수", "영희", "제니퍼", "존시나"]


let myFriendsSet = Set(myFriends)
let yourFriendsSet = Set(yourFriends)

let sharedFriends = myFriendsSet.intersection(yourFriends)
//union과 반대. 중복된 원소만 가져온다



---------------------------------------------------


day 63 : Set symmetricDifference

import UIKit

let myFriends = ["철수", "영희", "수잔", "제시카"]
let yourFriends = ["철수", "영희", "제니퍼", "존시나"]


let myFriendsSet = Set(myFriends)
let yourFriendsSet = Set(yourFriends)

let totalFriends = myFriendsSet.symmetricDifference(yourFriends)
//중복되는 원소를 아예 배열에서 제거하고 중복 안되는 원소들만 가져온다


---------------------------------------------------


day 64 : Tuple


import UIKit

// 튜플이란 (키: 값, 키: 값) 으로 묶어져있는 한 개 이상의 여러 쌍
var myPet : (name: String, kind: String, age: Int) = (name: "댕댕이", kind: "강아지", age: 1)

var myCat : (String, String, age: Int) = ("개냥이", "고양이", age: 1)
//키를 쓰지 않고 튜플을 생성하는 경우

myCat.age // 1
//튜플에 있는 원소 가져오기


---------------------------------------------------


day 65 : 메소드 반환 Tuple


import UIKit

//함수로 반환하는 튜플

func someFunction() -> (first: String, String){
    return ("하하하", "호호호")
}

let result = someFunction()

result.first //"하하하"

result.1 //"호호호" : 키 값 설정 안했을시 인덱스로 접근가능


---------------------------------------------------


day 66 : Any


import UIKit

class Animal {
}

//Any 타입: 자료형이 정해져있지 않고 계속 바뀐다

var someValue : Any = "호롤롤롤"

someValue = ("하하하", "호호호")


print(type(of: someValue))

print(123, "gkgkgk", Animal()) //Any의 대표적인 사용


---------------------------------------------------


day 67 : 
