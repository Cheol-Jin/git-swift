day 61 : Set union


import UIKit

let myFriends = ["철수", "영희", "수잔", "제시카"]
let yourFriends = ["철수", "영희", "제니퍼", "존시나"]


let myFriendsSet = Set(myFriends)
let yourFriendsSet = Set(yourFriends)

let totalFriends = myFriendsSet.union(yourFriends) //중복은 제거되고 두 set이 합쳐진다


---------------------------------------------------


day 62 : Set intersection


import UIKit

let myFriends = ["철수", "영희", "수잔", "제시카"]
let yourFriends = ["철수", "영희", "제니퍼", "존시나"]


let myFriendsSet = Set(myFriends)
let yourFriendsSet = Set(yourFriends)

let sharedFriends = myFriendsSet.intersection(yourFriends)
//union과 반대. 중복된 원소만 가져온다



---------------------------------------------------


day 63 : Set symmetricDifference

import UIKit

let myFriends = ["철수", "영희", "수잔", "제시카"]
let yourFriends = ["철수", "영희", "제니퍼", "존시나"]


let myFriendsSet = Set(myFriends)
let yourFriendsSet = Set(yourFriends)

let totalFriends = myFriendsSet.symmetricDifference(yourFriends)
//중복되는 원소를 아예 배열에서 제거하고 중복 안되는 원소들만 가져온다


---------------------------------------------------


day 64 : Tuple


import UIKit

// 튜플이란 (키: 값, 키: 값) 으로 묶어져있는 한 개 이상의 여러 쌍
var myPet : (name: String, kind: String, age: Int) = (name: "댕댕이", kind: "강아지", age: 1)

var myCat : (String, String, age: Int) = ("개냥이", "고양이", age: 1)
//키를 쓰지 않고 튜플을 생성하는 경우

myCat.age // 1
//튜플에 있는 원소 가져오기


---------------------------------------------------


day 65 : 메소드 반환 Tuple


import UIKit

//함수로 반환하는 튜플

func someFunction() -> (first: String, String){
    return ("하하하", "호호호")
}

let result = someFunction()

result.first //"하하하"

result.1 //"호호호" : 키 값 설정 안했을시 인덱스로 접근가능


---------------------------------------------------


day 66 : Any


import UIKit

class Animal {
}

//Any 타입: 자료형이 정해져있지 않고 계속 바뀐다

var someValue : Any = "호롤롤롤"

someValue = ("하하하", "호호호")


print(type(of: someValue))

print(123, "gkgkgk", Animal()) //Any의 대표적인 사용


---------------------------------------------------


day 67 : 패턴 매칭 연산자


import UIKit


let statusCode = 500


if (400...500) ~= statusCode { //contains 함수와 비슷한 역할을 한다, 조건, if, guard, 스위치문 등에 사용가능
    print("들어옴")
}


---------------------------------------------------


day 68 : 커스텀 패턴 매칭 연산자


import UIKit

let statusCode = 500

func isValidEmail(_ email: String) -> Bool {
    let emailRegEx = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,64}"

    let emailPred = NSPredicate(format:"SELF MATCHES %@", emailRegEx)
    return emailPred.evaluate(with: email)
}

func ~= (pattern: NSPredicate, value: String) -> Bool{
    return pattern.evaluate(with: value)
}

func ~= (pattern: String, value: Int) -> Bool{ //패턴매칭 연산자 오버로딩
    return pattern == "\(value)" //문자열로 변환해서 체크한다
}



let emailRegEx = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,64}"
let emailPred = NSPredicate(format:"SELF MATCHES %@", emailRegEx)

if emailPred ~= "ppakcoding" {
    print("이메일 형식입니다")
} else {
    print("이메일 형식이 아닙니다")
}

switch "ppakcoding@email.com" {
case emailPred:
    print("이메일 형식입니다 - switch")
default:
    print("이메일 형식이 아닙니다 - switch")
}

let someValue = 30

if "30" ~= someValue {
    print("30 입니다")
} else {
    print("30 아닙니다")
}

switch someValue {
case "30":
    print("30 입니다 - switch")
default:
    print("30 아닙니다 - switch")
}

if case "30" = someValue {
    print("30 입니다 - if case")
} else {
    print("30 아닙니다 - if case")
}

//// 조건, if, guard, 스위치
//if (400...500) ~= statusCode {
//    print("들어옴")
//}
//
//switch statusCode {
//case (400...500):
//    print("들어옴 - switch")
//default: break
//}
//
//if case (400...500) = statusCode {
//    print("들어옴 - is case")
//}
//
//
//func doSomeCheck(status: Int){
//    guard (400...500) ~= status else {
//        print("X")
//        return
//    }
//    print("들어왔습니다")
//}
//
//doSomeCheck(status: 500)


---------------------------------------------------

day 69 : while문 반복

import UIKit

var count : Int = 0

while count < 5 {
    
    count += 1
//    count = count - 1
    print("count: \(count)")
    if count == 3 {
        break
    }
}
print("완료 \(count)")


---------------------------------------------------

day 70 : repeat while 반복

import UIKit

var count : Int = 6

let max = 5

// 일단 실행 -> 조건 체크
repeat { //다른 언어의 do-while과 같은 역할
    count += 1
    print("count: \(count)")
} while count < max
print("완료")

//// 조건 먼저 -> 실행
while count < max {
    count += 1
    print("count: \(count)")
}

print("완료")
