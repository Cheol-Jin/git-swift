day 41 : 디자인패턴 빌더패턴


struct Pet {
    var name: String? = nil
    var age: Int? = nil
    init(){}
    init(builder: SecondPetBuilder){
        self.name = builder.name
        self.age = builder.age
    }
}
//두 가지 방법이 있음
//빌더: 만들어 주는 것을 만든다
class SecondPetBuilder {

    var name: String? = nil
    var age: Int? = nil

    typealias BuilderClosure = (SecondPetBuilder) -> ()

    init(buildClosure: BuilderClosure) {
        buildClosure(self) //자기 자신을 넣어줌
    }
}


class PetBuilder {
    private var pet : Pet = Pet()
    func withName(_ name: String) -> Self { //자기자신 리턴
        pet.name = name
        return self
    }
    
    func withAge(_ age: Int) -> Self {
        pet.age = age
        return self
    }
    func build() -> Pet {
        return self.pet
    }
}

let myPet = PetBuilder()
    .withAge(3)
    .withName("야옹이")
    .build() //빌드로 마무리

let petBuilder = SecondPetBuilder { builder in
    builder.name = "댕댕이"
    builder.age = 10
}

let mySecondPet = Pet(builder: petBuilder)


------------------------------------------

day 42 : collection 


// 콜렉션 - list [], set<>, dictionary[:]
var myFriends = ["철수", "영희", "수잔"]

let otherFriends : Set<String> = ["제임스", "존슨", "존시나"]

//myFriends.append(contentsOf: otherFriends)
let totalFriends = myFriends + otherFriends
//합쳐져서 String 배열이 된다
totalFriends


-------------------------------------------

day 43 : reduce


//reduce :클로저들을 합침
struct Friend : Hashable {
    var name: String
    var age: Int
}

let myFriends = [
    Friend(name: "철수", age: 10),
    Friend(name: "영희", age: 20),
    Friend(name: "찰리", age: 20),
    Friend(name: "레이첼", age: 30),
    Friend(name: "수잔", age: 30)
]

let totalAge = myFriends.reduce(0) { partialResult, aFriend in
    return partialResult + aFriend.age
} //초기값 0, 반복문 돌림, 축적되며 계속 더해짐 10,20,20,30,30

//[:]
let groupedFriends = myFriends.reduce(into: [:]) { partialResult, aFriend in
    return partialResult[aFriend.age] = myFriends.filter{ $0.age == aFriend.age }
} //filter 사용해서 나이별로 묶기

groupedFriends


--------------------------------------------

day 44 : 콜렉션 간 변형


let numbers = [1,1,1,5,5,9,7]
//콜렉션 간 변경을 통해 유일한 값을 가지는 배열로 변환
let uniqueNumbers = Set(numbers)
uniqueNumbers
var uniqueNumbersArranged = Array(uniqueNumbers) //배열로 바뀜
uniqueNumbersArranged.sort()
