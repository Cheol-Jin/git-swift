day 2 : foreach문

- 콜렉션: 데이터를 모아둔 것
종류: 배열, set, 딕셔너리, 튜플

- 반복 돌릴 때 where절 옆에 추가해서 for문에 대한 조건을 추가할 수 있다.

day 3 : enum 케이스 나누기

- 직접 출력문 작성시 \(변수) 출력양식 사용

- 클래스와 유사, 값에 접근 위해서는 뒤에 .rawValue 붙여주면됨.


day 4 : 반복문

//0...5 >> 0,1,2,3,4,5
//0..<5 >> 0,1,2,3,4

ex)
for i in 0...5 {
    print(i)
}

for index in 0..<5 where index % 2 == 0 {
    print("호호 index: \(index)")
}

* 0~100 숫자 25개 뽑아서 리스트에 저장

var randomInts: [Int] = [Int]()

for _ in 0..<25 {
    let randomNumber = Int.random(in: 0...100)
    randomInts.append(randomNumber)
}

print("randomInts : \(randomInts)")

--------------------------------------
day 5 : Optional 


//옵셔널이란?
//값이 있는지 없는지 모른다.
var someVariable : Int? = nil

if someVariable == nil {
    someVariable = 90
}
print("someVariable :\(someVariable)")

// 언랩핑이란? 랩 즉 감싸져있는 것을 벗기는 것.

if let otherVariable = someVariable {
    print("언래핑 되었다. 즉 값이 있다. otherVariable : \(otherVariable)")}
    else{
        print("값이 없다.")
    }
//값이 있으면 other에 쓰겠다.(optional이 아니게 됨, 언랩핑.) 
// 90

someVariable = nil

//someVariable에 값이 없으면 즉 비어있으면 기본값으로 10을 넣겠다.
let myValue = someVariable ?? 10
print("myvalue : \(myValue)") // 10

var firstValue : Int? = 30
var secondValue : Int? = 50

print("firstValue: \(firstValue)")
print("secondValue: \(secondValue)")

unwrap(firstValue)
unwrap(secondValue)

func unwrap(_ parameter: Int?){ // _을 매개변수 앞에 붙이면 함수 호출시 매개변수 안적어도 됨
    print("unwrap() called")
    //값이 없으면 리턴 해버린다.
    guard let unWrappedParam = parameter
            //위 코드의 otherVariable의 예와 동일한 역할을 한다.
    else{
        return
    }
    print("unWrappedParam = \(unWrappedParam)")
}

----------------------------------------

day6 : class / struct


//모델 : 데이터 덩어리들을 모아놓는것. 클래스 / 구조체

// 구조체
struct YoutuberStruct{
    var name : String
    var subscribersCount : Int
}

var devJeong = YoutuberStruct(name: "정대리",
subscribersCount: 99999)

var devJeongClone = devJeong //값 복사

print("값 넣기 전 devJeongClone.name: \(devJeongClone.name)")

devJeongClone.name = "바꼈당"

print("값 넣은 후 devJeongClone.name: \(devJeongClone.name)")
print("값 넣은 후 devJeong.name: \(devJeong.name)")
//정대리
//구조체 같은 경우는 사본을 만든 것과 같다

// 클래스

class YoutuberClass{
    var name : String
    var subscribersCount : Int
    // 클래스는 생성자(init)이 필요
    // init으로 매개변수를 가진 생성자 메소드를 만들어야
    // 매개변수를 넣어서 그 값을 가진 객체(object)를 만들 수 있다.
    init(name: String, subscribersCount: Int){
        self.name = name
        self.subscribersCount = subscribersCount
    }
}

var jeongDaeRi = YoutuberClass(name: "정대리",
subscribersCount: 99999)

var jeongDaeRiClone = jeongDaeRi

print("값 넣기 전 jeongDaeRiClone.name: \(jeongDaeRiClone.name)")

jeongDaeRiClone.name = "바꼈당"

print("값 넣은 후 jeongDaeRiClone.name: \(jeongDaeRiClone.name)")
print("값 넣은 후 jeongDaeRi.name: \(jeongDaeRi.name)")
//바꼈당
//class는 서로 연결되어있음(같은 메모리 주소를 가리키고 있음. (참조))


--------------------------------

day 7 : proporty observer

var myAge = 0{
    willSet{
        print("값이 설정될 예정이다. myAge : \(myAge)")
    }
    didSet{
        print("값이 설정되었다. myAge : \(myAge)")
    }
}

myAge = 10
myAge = 20

출력값: 
값이 설정될 예정이다. myAge : 0
값이 설정되었다. myAge : 10
값이 설정될 예정이다. myAge : 10
값이 설정되었다. myAge : 20


----------------------------------

day 8 : 함수, 메소드

// 함수, 메소드 정의
func myFunction(name: String) -> String{
    return "안녕하세요?! \(name) 입니다!"
}

// 함수, 메소드를 호출한다. call
myFunction(name: "철진이")

// 함수, 메소드 정의
func myFunctionSecond(with name: String) -> String{
    return "안녕하세요?! \(name) 입니다!"
}

myFunctionSecond(with: "랄랄라") //매개변수 겹칠 때 with로 받을 수 있다.

// 함수, 메소드 정의
func myFunctionThird(_ name: String) -> String{
    return "안녕하세요?! \(name) 입니다!"
}

myFunctionThird("핳핳핳") // _ 사용시 매개변수 적지 않아도 됨



----------------------------------

day 9 : generic

//제네릭은 어떠한 자료형도 받을 수 있는 자료형

struct MyArray<SomeElement>{//주로 T를 사용
    // 제네릭을 담은 빈 배열
    var elements : [SomeElement] = [SomeElement]()
    
    init(_ elements: [SomeElement]){
        self.elements = elements
    }
    
}

struct Friend{
    var name: String
}

struct PpakCoder{
    var name: String
}

var mySomeArray  = MyArray([1,2,3])
print("mySomeArray : \(mySomeArray)")
                           
var myStringArray  = MyArray(["가","나","다"])
print("myStringArray : \(myStringArray)")

let friend_01 = Friend(name: "철수")
let friend_02 = Friend(name: "영희")
let friend_03 = Friend(name: "수진")
                           
var myFriendArray = MyArray([friend_01,friend_02,friend_03])

print("myFriendArray: \(myFriendArray)")

----------------------------------

day 10 : 클로저

// String을 반환하는 클로저
let myName : String = {
    //myName 으로 들어간다
    return "정대리"
}()

print(myName)

//클로저 정의
let myRealName : (String) -> String = {(name:String) -> String in
    return "개발하는 \(name)"
} //매개변수를 받아서 처리하는 형태

print(myRealName("쩡대리"))

let myRealNameLogic : (String) -> Void = {(name: String) in
    print("개발하는 \(name)")
}

myRealNameLogic("정대리 !!")


--------------------------------------


