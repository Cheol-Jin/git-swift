day 51 : struct 기본 생성자


//struct Pet {
//    var name: String
////    init(){
////        name = "호호호"
////    }
////    init(name : String = "댕댕이"){
////        self.name = name //struct도 동일하게 사용 가능
////    }
//}
struct Pet {
    var name: String
}
extension Pet { //struct: extension으로 init을 빼면 가능
    init(){
        name = "호호호"
    }
}

let myCat = Pet(name: "하하하")

//let myDog = Pet()


-----------------------------------

day 52 : singletion 패턴 

- 특정 용도로 객체를 하나만 생성하여, 공용으로 사용하고 싶을 때 사용하는 디자인 유형

장점 : - 한 번의 Instance만 생성하므로 메모리 낭비를 방지할 수 있음
- Singleton Instance는 전역 Instance로 다른 클래스들과 자원 공유가 쉬움
- DBCP(DataBase Connection Pool)처럼 공통된 객체를 여러개 생성해서 사용해야하는 상황에서 많이 사용 (쓰레드풀, 캐시, 대화상자, 사용자 설정, 레지스트리 설정, 로그 기록 객체등)

단점 : - Singleton Instance가 너무 많은 일을 하거나, 많은 데이터를 공유시킬 경우 다른 클래스의 Instance들 간 결합도가 높아져  "개방=폐쇄" 원칙을 위배함 (객체 지향 설계 원칙 어긋남)
- 따라서 수정과 테스트가 어려워짐


-----------------------------------

day 53 : toggle


import UIKit


var isDarkMode : Bool = false


isDarkMode.toggle() // true


-----------------------------------

day 54 : 프로토콜 조건적용


import UIKit

protocol Naming{
    var name: String { get set }
}

class Cat : Naming {
    var name: String
    init(name: String) {
        self.name = name
    }
}

class Dog : Naming {
    var name: String
    init(name: String) {
        self.name = name
    }
}

//extension Naming  {
//
//}
extension Naming {
    func sayName() where Self : Dog {
        print("\(self.name) 멍멍!")
    }
    func sayName() where Self : Cat {
        print("\(self.name) 야옹~")
    }
}

let myDog = Dog(name: "댕댕이")
let myCat = Cat(name: "개냥이")
myCat.sayName()
myDog.sayName()


-----------------------------------

day 55 : 자료형 체크


import UIKit

class Cat {}
class Dog {}

let myCat = Cat()
let myDog = Dog()

if myCat is Cat {
    print("고양이 입니다111")
}

func checkIfSheIsCat(){
    guard myCat is Cat else { //guard : if의 반대말
        print("고양이가 아닙니다 ")
        return
    }
    print("고양이 입니다 22")
}

checkIfSheIsCat()

switch myCat {
    case is Dog:
    print("강아지 입니다 333")
    case let myKitty as Cat:
    print("고양이 입니다 333 ")
}

if case is Cat = myCat { //if case는 자료형이 먼저 나와야함
    print("고양이 입니다 44")
}

func checkIfSheIsDog(){
    guard case is Dog = myCat else {
        print("강아지가 아닙니다 555")
        return
    }
    print("강아지 입니다 555")
}

checkIfSheIsDog()
