day 51 : struct 기본 생성자


//struct Pet {
//    var name: String
////    init(){
////        name = "호호호"
////    }
////    init(name : String = "댕댕이"){
////        self.name = name //struct도 동일하게 사용 가능
////    }
//}
struct Pet {
    var name: String
}
extension Pet { //struct: extension으로 init을 빼면 가능
    init(){
        name = "호호호"
    }
}

let myCat = Pet(name: "하하하")

//let myDog = Pet()


-----------------------------------

day 52 : singletion 패턴 

- 특정 용도로 객체를 하나만 생성하여, 공용으로 사용하고 싶을 때 사용하는 디자인 유형

장점 : - 한 번의 Instance만 생성하므로 메모리 낭비를 방지할 수 있음
- Singleton Instance는 전역 Instance로 다른 클래스들과 자원 공유가 쉬움
- DBCP(DataBase Connection Pool)처럼 공통된 객체를 여러개 생성해서 사용해야하는 상황에서 많이 사용 (쓰레드풀, 캐시, 대화상자, 사용자 설정, 레지스트리 설정, 로그 기록 객체등)

단점 : - Singleton Instance가 너무 많은 일을 하거나, 많은 데이터를 공유시킬 경우 다른 클래스의 Instance들 간 결합도가 높아져  "개방=폐쇄" 원칙을 위배함 (객체 지향 설계 원칙 어긋남)
- 따라서 수정과 테스트가 어려워짐


-----------------------------------

day 53 : toggle


import UIKit


var isDarkMode : Bool = false


isDarkMode.toggle() // true


-----------------------------------

day 54 : 프로토콜 조건적용


import UIKit

protocol Naming{
    var name: String { get set }
}

class Cat : Naming {
    var name: String
    init(name: String) {
        self.name = name
    }
}

class Dog : Naming {
    var name: String
    init(name: String) {
        self.name = name
    }
}

//extension Naming  {
//
//}
extension Naming {
    func sayName() where Self : Dog {
        print("\(self.name) 멍멍!")
    }
    func sayName() where Self : Cat {
        print("\(self.name) 야옹~")
    }
}

let myDog = Dog(name: "댕댕이")
let myCat = Cat(name: "개냥이")
myCat.sayName()
myDog.sayName()


-----------------------------------

day 55 : 자료형 체크


import UIKit

class Cat {}
class Dog {}

let myCat = Cat()
let myDog = Dog()

if myCat is Cat {
    print("고양이 입니다111")
}

func checkIfSheIsCat(){
    guard myCat is Cat else { //guard : if의 반대말
        print("고양이가 아닙니다 ")
        return
    }
    print("고양이 입니다 22")
}

checkIfSheIsCat()

switch myCat {
    case is Dog:
    print("강아지 입니다 333")
    case let myKitty as Cat:
    print("고양이 입니다 333 ")
}

if case is Cat = myCat { //if case는 자료형이 먼저 나와야함
    print("고양이 입니다 44")
}

func checkIfSheIsDog(){
    guard case is Dog = myCat else {
        print("강아지가 아닙니다 555")
        return
    }
    print("강아지 입니다 555")
}

checkIfSheIsDog()


--------------------------------------

day 56 : 중첩 타입 (Nested Type)

import UIKit
import Foundation

struct MyPet {
    enum Kind { //스트럭트 안에 enum타입
        case cat // kind 이넘의 케이스
        case dog
        var value: String {
            switch self { //자기 자신을 case를 통해 정리
            case .cat:
                return "고양이"
            case .dog:
                return "강아지"
            }
        }
        var name: String {
            switch self {
            case .cat:
                return "개냥이"
            case .dog:
                return "해피"
            }
        }
    }// Kind enum
    let kind: Kind
    var description: String {
        return "우리집 \(kind.value) \(kind.name)"
    }
}

let myCat = MyPet(kind: .cat) // MyPet 스트럭트가 가지는 kind 변수
print(myCat.description) // 우리집 고양이 개냥이

if myCat.kind == MyPet.Kind.cat {
    print("고양이 입니다")
}

let myDog = MyPet(kind: .dog)
print(myDog.description) // 우리집 강아지 해피


----------------------------------------

day 57: 프로토콜 옵셔널 처리

import UIKit

@objc protocol Animal { //objc 이용 (두번째 방법)
    @objc optional func doMoreCry() //optional 키워드가 있음
}

protocol Pet {
    func doCry()
}

extension Pet { //extension으로 확장 (첫번째 방법)
    func doCry(){} // 아무것도 구현 안함
}

class Cat : Animal { //optional으로 구현 가능
}

-----------------------------------------

day 58: Set / isSubset, isSuperset


import UIKit

let totalFriends = ["철수", "영희", "수잔", "제임스"] //배열로는 불가, set으로 자료형 바꿔 사용해야함
let foreignFriends = ["수잔", "제임스"]
let koreanFriends = ["철수", "영희", "상철"]

let totalFriendsSet = Set(totalFriends) //배열을 set으로 만듬
let foreignFriendsSet = Set(foreignFriends)
let koreanFriendsSet = Set(koreanFriends)

// isSubset 내가 속해 있는지 체크
let isForeignFriendsIsInTotalFriends = foreignFriendsSet.isSubset(of: totalFriendsSet) //true

// isSuperset 내가 포함하고 있는지 체크
let isTotalFriendsHasForeignFriends = totalFriendsSet.isSuperset(of: foreignFriendsSet) //true

let isTotalFriendsHasKoreanFriends = totalFriendsSet.isSuperset(of: koreanFriendsSet) //false

let isKoreanFriendsIsInTotalFriends = koreanFriendsSet.isSubset(of: totalFriendsSet) //false


------------------------------------------

day 59: stride


import UIKit


// 범위안에서 반복처리
for countdown in stride(from: 10, to: 0, by: -2) {
    print("카운트 다운 to: \(countdown)") //10, 8, 6 ...
}
print("=======")
for countdown in stride(from: 5, through: 0, by: -1) {
    print("카운트 다운 through: \(countdown)") //5, 4, 3 ... through면 0까지 센다. to는 1까지 셈
}

//for countup in stride(from: 0, to: 5, by: 1) {
//    print("카운트 업 : \(countup)")
//}



extension Array {
    
    func chunks(_ chunkSize: Int) -> [[Element]] { //2차원배열로 만들어서 반환
        return stride(from: 0, to: self.count, by: chunkSize).map{ //map으로 형태를 바꿈
            return Array(self[$0..<Swift.min($0 + chunkSize, self.count)])
        }
    }
}

let numbers = Array(1...10)
let chuckedArray = numbers.chunks(2)//[1,2] [3,4] ...

------------------------------------------

day 60 : Dictionary 반복


import UIKit

let myFriends : [String: Int] = ["철수" : 19, "수잔": 23, "제임스": 30]

for (name, age) in myFriends {
    print("이름: \(name), 나이: \(age)")
}

myFriends.forEach { (name: String, age: Int) in //forEach - 클로저 사용
    print("이름: \(name), 나이: \(age)")
}

myFriends.keys.forEach { name in
    print("이름: \(name)")
}

myFriends.values.forEach { age in
    print("나이: \(age)")
}



